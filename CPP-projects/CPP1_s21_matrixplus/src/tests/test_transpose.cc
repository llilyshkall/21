#include "test_main.h"

TEST(transpose, tr_matr_0) {
  S21Matrix first(5, 5);
  first(0, 0) = -23.6;
  first(0, 1) = 14.8;
  first(0, 2) = -28.6;
  first(0, 3) = 14.8;
  first(0, 4) = -24.7;
  first(1, 0) = -46.6;
  first(1, 1) = -12.6;
  first(1, 2) = 34.8;
  first(1, 3) = 30;
  first(1, 4) = -8.4;
  first(2, 0) = -26.4;
  first(2, 1) = 25.5;
  first(2, 2) = -7.3;
  first(2, 3) = -7.4;
  first(2, 4) = 12.3;
  first(3, 0) = -23.9;
  first(3, 1) = -2.2;
  first(3, 2) = 38.3;
  first(3, 3) = -47.4;
  first(3, 4) = 18.8;
  first(4, 0) = -46.5;
  first(4, 1) = -46.7;
  first(4, 2) = 21.1;
  first(4, 3) = -38;
  first(4, 4) = 4.4;
  S21Matrix ans(5, 5);
  ans(0, 0) = -23.6;
  ans(1, 0) = 14.8;
  ans(2, 0) = -28.6;
  ans(3, 0) = 14.8;
  ans(4, 0) = -24.7;
  ans(0, 1) = -46.6;
  ans(1, 1) = -12.6;
  ans(2, 1) = 34.8;
  ans(3, 1) = 30;
  ans(4, 1) = -8.4;
  ans(0, 2) = -26.4;
  ans(1, 2) = 25.5;
  ans(2, 2) = -7.3;
  ans(3, 2) = -7.4;
  ans(4, 2) = 12.3;
  ans(0, 3) = -23.9;
  ans(1, 3) = -2.2;
  ans(2, 3) = 38.3;
  ans(3, 3) = -47.4;
  ans(4, 3) = 18.8;
  ans(0, 4) = -46.5;
  ans(1, 4) = -46.7;
  ans(2, 4) = 21.1;
  ans(3, 4) = -38;
  ans(4, 4) = 4.4;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_1) {
  S21Matrix first(3, 1);
  first(0, 0) = -45.3;
  first(1, 0) = -26.2;
  first(2, 0) = -30.1;
  S21Matrix ans(1, 3);
  ans(0, 0) = -45.3;
  ans(0, 1) = -26.2;
  ans(0, 2) = -30.1;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_2) {
  S21Matrix first(3, 3);
  first(0, 0) = 14.3;
  first(0, 1) = 31.1;
  first(0, 2) = -10.6;
  first(1, 0) = 6.5;
  first(1, 1) = -42.2;
  first(1, 2) = -19.9;
  first(2, 0) = 38.1;
  first(2, 1) = -15;
  first(2, 2) = 10.2;
  S21Matrix ans(3, 3);
  ans(0, 0) = 14.3;
  ans(1, 0) = 31.1;
  ans(2, 0) = -10.6;
  ans(0, 1) = 6.5;
  ans(1, 1) = -42.2;
  ans(2, 1) = -19.9;
  ans(0, 2) = 38.1;
  ans(1, 2) = -15;
  ans(2, 2) = 10.2;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_3) {
  S21Matrix first(5, 3);
  first(0, 0) = 2.3;
  first(0, 1) = -28.5;
  first(0, 2) = -9.5;
  first(1, 0) = -18.8;
  first(1, 1) = -30.7;
  first(1, 2) = -18;
  first(2, 0) = 9.4;
  first(2, 1) = 17.3;
  first(2, 2) = 18.1;
  first(3, 0) = 37.4;
  first(3, 1) = 42.9;
  first(3, 2) = -13.1;
  first(4, 0) = -3.7;
  first(4, 1) = -19.1;
  first(4, 2) = -46.2;
  S21Matrix ans(3, 5);
  ans(0, 0) = 2.3;
  ans(1, 0) = -28.5;
  ans(2, 0) = -9.5;
  ans(0, 1) = -18.8;
  ans(1, 1) = -30.7;
  ans(2, 1) = -18;
  ans(0, 2) = 9.4;
  ans(1, 2) = 17.3;
  ans(2, 2) = 18.1;
  ans(0, 3) = 37.4;
  ans(1, 3) = 42.9;
  ans(2, 3) = -13.1;
  ans(0, 4) = -3.7;
  ans(1, 4) = -19.1;
  ans(2, 4) = -46.2;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_4) {
  S21Matrix first(5, 3);
  first(0, 0) = 45.4;
  first(0, 1) = -30.7;
  first(0, 2) = 26.7;
  first(1, 0) = 37.5;
  first(1, 1) = -46.3;
  first(1, 2) = -26.5;
  first(2, 0) = -6.7;
  first(2, 1) = 33.4;
  first(2, 2) = -17.3;
  first(3, 0) = 44.7;
  first(3, 1) = 42.1;
  first(3, 2) = 44.6;
  first(4, 0) = 4.2;
  first(4, 1) = -41.4;
  first(4, 2) = 16.3;
  S21Matrix ans(3, 5);
  ans(0, 0) = 45.4;
  ans(1, 0) = -30.7;
  ans(2, 0) = 26.7;
  ans(0, 1) = 37.5;
  ans(1, 1) = -46.3;
  ans(2, 1) = -26.5;
  ans(0, 2) = -6.7;
  ans(1, 2) = 33.4;
  ans(2, 2) = -17.3;
  ans(0, 3) = 44.7;
  ans(1, 3) = 42.1;
  ans(2, 3) = 44.6;
  ans(0, 4) = 4.2;
  ans(1, 4) = -41.4;
  ans(2, 4) = 16.3;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_5) {
  S21Matrix first(5, 4);
  first(0, 0) = -1.9;
  first(0, 1) = -14.4;
  first(0, 2) = -2.4;
  first(0, 3) = 47;
  first(1, 0) = -41.5;
  first(1, 1) = 15.1;
  first(1, 2) = -21.3;
  first(1, 3) = 30.5;
  first(2, 0) = 10.5;
  first(2, 1) = -37.3;
  first(2, 2) = -49.3;
  first(2, 3) = 21.2;
  first(3, 0) = 23.5;
  first(3, 1) = -27.7;
  first(3, 2) = -7.1;
  first(3, 3) = -44.2;
  first(4, 0) = 11.4;
  first(4, 1) = 3.8;
  first(4, 2) = -33.3;
  first(4, 3) = 22;
  S21Matrix ans(4, 5);
  ans(0, 0) = -1.9;
  ans(1, 0) = -14.4;
  ans(2, 0) = -2.4;
  ans(3, 0) = 47;
  ans(0, 1) = -41.5;
  ans(1, 1) = 15.1;
  ans(2, 1) = -21.3;
  ans(3, 1) = 30.5;
  ans(0, 2) = 10.5;
  ans(1, 2) = -37.3;
  ans(2, 2) = -49.3;
  ans(3, 2) = 21.2;
  ans(0, 3) = 23.5;
  ans(1, 3) = -27.7;
  ans(2, 3) = -7.1;
  ans(3, 3) = -44.2;
  ans(0, 4) = 11.4;
  ans(1, 4) = 3.8;
  ans(2, 4) = -33.3;
  ans(3, 4) = 22;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_6) {
  S21Matrix first(5, 5);
  first(0, 0) = 8.8;
  first(0, 1) = -2.5;
  first(0, 2) = 37.4;
  first(0, 3) = -26.5;
  first(0, 4) = -13.5;
  first(1, 0) = -12.8;
  first(1, 1) = 26.7;
  first(1, 2) = 38.6;
  first(1, 3) = 19.6;
  first(1, 4) = 18.3;
  first(2, 0) = -15.9;
  first(2, 1) = -45.9;
  first(2, 2) = 45.3;
  first(2, 3) = 38.8;
  first(2, 4) = -48.9;
  first(3, 0) = -49.4;
  first(3, 1) = -34.3;
  first(3, 2) = -6.4;
  first(3, 3) = 11;
  first(3, 4) = -37.4;
  first(4, 0) = 44.9;
  first(4, 1) = 47.5;
  first(4, 2) = 11.2;
  first(4, 3) = 3.6;
  first(4, 4) = -26.7;
  S21Matrix ans(5, 5);
  ans(0, 0) = 8.8;
  ans(1, 0) = -2.5;
  ans(2, 0) = 37.4;
  ans(3, 0) = -26.5;
  ans(4, 0) = -13.5;
  ans(0, 1) = -12.8;
  ans(1, 1) = 26.7;
  ans(2, 1) = 38.6;
  ans(3, 1) = 19.6;
  ans(4, 1) = 18.3;
  ans(0, 2) = -15.9;
  ans(1, 2) = -45.9;
  ans(2, 2) = 45.3;
  ans(3, 2) = 38.8;
  ans(4, 2) = -48.9;
  ans(0, 3) = -49.4;
  ans(1, 3) = -34.3;
  ans(2, 3) = -6.4;
  ans(3, 3) = 11;
  ans(4, 3) = -37.4;
  ans(0, 4) = 44.9;
  ans(1, 4) = 47.5;
  ans(2, 4) = 11.2;
  ans(3, 4) = 3.6;
  ans(4, 4) = -26.7;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_7) {
  S21Matrix first(5, 4);
  first(0, 0) = 27.1;
  first(0, 1) = -5.5;
  first(0, 2) = 44.2;
  first(0, 3) = 30;
  first(1, 0) = 25.9;
  first(1, 1) = -33.4;
  first(1, 2) = -11.3;
  first(1, 3) = -33.5;
  first(2, 0) = 19.5;
  first(2, 1) = -26.3;
  first(2, 2) = -25.2;
  first(2, 3) = -49.4;
  first(3, 0) = 41.4;
  first(3, 1) = 44.2;
  first(3, 2) = -34.6;
  first(3, 3) = -36.9;
  first(4, 0) = 36.8;
  first(4, 1) = 16.5;
  first(4, 2) = 17.7;
  first(4, 3) = -24.2;
  S21Matrix ans(4, 5);
  ans(0, 0) = 27.1;
  ans(1, 0) = -5.5;
  ans(2, 0) = 44.2;
  ans(3, 0) = 30;
  ans(0, 1) = 25.9;
  ans(1, 1) = -33.4;
  ans(2, 1) = -11.3;
  ans(3, 1) = -33.5;
  ans(0, 2) = 19.5;
  ans(1, 2) = -26.3;
  ans(2, 2) = -25.2;
  ans(3, 2) = -49.4;
  ans(0, 3) = 41.4;
  ans(1, 3) = 44.2;
  ans(2, 3) = -34.6;
  ans(3, 3) = -36.9;
  ans(0, 4) = 36.8;
  ans(1, 4) = 16.5;
  ans(2, 4) = 17.7;
  ans(3, 4) = -24.2;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_8) {
  S21Matrix first(4, 4);
  first(0, 0) = -14.9;
  first(0, 1) = 20.7;
  first(0, 2) = 22;
  first(0, 3) = -27.2;
  first(1, 0) = -27.6;
  first(1, 1) = 28.6;
  first(1, 2) = 37.2;
  first(1, 3) = -30.3;
  first(2, 0) = -25.1;
  first(2, 1) = -41.8;
  first(2, 2) = 24.6;
  first(2, 3) = -34;
  first(3, 0) = -6.1;
  first(3, 1) = -9.5;
  first(3, 2) = -30.2;
  first(3, 3) = -22.9;
  S21Matrix ans(4, 4);
  ans(0, 0) = -14.9;
  ans(1, 0) = 20.7;
  ans(2, 0) = 22;
  ans(3, 0) = -27.2;
  ans(0, 1) = -27.6;
  ans(1, 1) = 28.6;
  ans(2, 1) = 37.2;
  ans(3, 1) = -30.3;
  ans(0, 2) = -25.1;
  ans(1, 2) = -41.8;
  ans(2, 2) = 24.6;
  ans(3, 2) = -34;
  ans(0, 3) = -6.1;
  ans(1, 3) = -9.5;
  ans(2, 3) = -30.2;
  ans(3, 3) = -22.9;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}

TEST(transpose, tr_matr_9) {
  S21Matrix first(4, 2);
  first(0, 0) = 37.4;
  first(0, 1) = -6.5;
  first(1, 0) = 4.9;
  first(1, 1) = -37.7;
  first(2, 0) = -36;
  first(2, 1) = -29.5;
  first(3, 0) = -9.7;
  first(3, 1) = 42.2;
  S21Matrix ans(2, 4);
  ans(0, 0) = 37.4;
  ans(1, 0) = -6.5;
  ans(0, 1) = 4.9;
  ans(1, 1) = -37.7;
  ans(0, 2) = -36;
  ans(1, 2) = -29.5;
  ans(0, 3) = -9.7;
  ans(1, 3) = 42.2;
  S21Matrix second = first.Transpose();
  EXPECT_EQ(second.EqMatrix(ans), true);
}
